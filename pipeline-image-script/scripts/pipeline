#!/bin/bash
#Author: Mark Cu

PID=$PID
TOKEN=$PTOKEN
PERMISSION=$PERMISSION
MESSAGE=$( echo $CI_COMMIT_MESSAGE | sed 's/"/\"/g' | sed "s/'/\'/g" )

#Old gitlab version parser
#BRANCH=$( git branch --contains $CI_COMMIT_TAG | sed -n 2p | sed "s/ //g" )
#Fixed from gitlab upgrade
BRANCH=$( git branch -a  --contains $CI_COMMIT_TAG | grep 'remotes/origin/master' | awk -F'/' '{print $3}' )

PREVIOUS_TAG=$( git tag | xargs -I@ git log --format=format:"%ai @%n" -1 @ | sort -r | awk '{print $4}' | sed -n 2p )
STORY="RELEASE"

shopt -s nocasematch

echo "Checking Branch ${BRANCH^^} with Tag ${CI_COMMIT_TAG^^}..."

if [[ "$BRANCH" != "master" ]] || [[ -z "$CI_COMMIT_TAG" ]] 
then
  if [[ "$CI_COMMIT_REF_NAME" == "hotfix"* ]]
  then
    STORY="HOTFIX"
  elif [[ "$CI_COMMIT_REF_NAME" == "dev"* ]] || [[ "$CI_COMMIT_REF_NAME" == "cicd" ]] || [[ "$CI_COMMIT_REF_NAME" == "shai" ]] || [[ "$CI_COMMIT_REF_NAME" == "release" ]] || [[ "$CI_COMMIT_REF_NAME" == "qa" ]] || [[ "$CI_COMMIT_REF_NAME" == "NodeVersion"* ]] || [[ "$CI_COMMIT_REF_NAME" == "v13"* ]]
  then
    STORY="DEVELOPMENT"
  else
    echo "Trigger Failed: Unauthorized trigger with branch/tag $CI_COMMIT_REF_NAME! Please set your master as default branch or contact DevOps Admin."
    exit 1
  fi
fi

# HELP.
if [[ "$1" == "-h" || "$1" == "--help" ]]; then
  echo '=============================='
  echo '| Pipeline Trigger By DevOps |'
  echo '=============================='
  echo -e '\nUsage: cicd pipeline "<pipeline_id>" "<token>"\n\n Options:\n PIPELINE ID\t=\tGitlab Pipeline ID\n TOKEN\t\t=\tGitlab Pipeline Token\n\n e.g cicd pipeline 101 xxxxxxxx'
  exit 0
fi

if [[ "$PERMISSION" != "DEVOPS" ]]; then
  echo "Unauthorized: You don't have permission to run this command! Please contact Mark Cu Admin."
  exit 1
else

  # PIPELINE ID.
  PID=$1
  if [[ "${PID}" == "" ]]
  then
    echo "No pipeline ID specified or invalid option"
    echo "Type -h or --help for more details."
    exit 1
  fi
  shift

  # TOKEN.
  TOKEN=$1
  if [[ "${TOKEN}" == "" ]]
  then
    echo "No token specified or invalid option."
    echo "Type -h or --help for more details."
    exit 1
  fi
  shift

  if [[ "$STORY" == "HOTFIX" ]] || [[ "$STORY" == "DEVELOPMENT" ]]
  then
TAG=${CI_COMMIT_REF_NAME,,}
PREVIOUS_TAG="NotAvailable"
BRANCH=${CI_COMMIT_REF_NAME,,}
PAYLOAD=$(cat <<EOF
{
     "token":"$TOKEN",
     "ref":"release",
     "variables":{
       "CANDIDATE":"$STORY",
       "PROJECT_ID":"$CI_PROJECT_ID",
       "APPLICATION":"$CI_PROJECT_NAME",
       "TAG":"$TAG",
       "BRANCH":"${CI_COMMIT_REF_NAME,,}",
       "PREVIOUS_TAG":"$PREVIOUS_TAG",
       "COMMIT_SHA":"${CI_COMMIT_SHA:0:8}",
       "MESSAGE":"$MESSAGE",
       "TRIGGERED_BY":"$GITLAB_USER_NAME",
       "EMAIL":"$GITLAB_USER_EMAIL"
       }
     } 
EOF
)
  elif [[ "$STORY" == "RELEASE" ]]
  then
TAG=$CI_COMMIT_TAG
PAYLOAD=$(cat <<EOF
{
     "token":"$TOKEN",
     "ref":"release",
     "variables":{
       "CANDIDATE":"$STORY",
       "PROJECT_ID":"$CI_PROJECT_ID",
       "APPLICATION":"$CI_PROJECT_NAME",
       "TAG":"$TAG",
       "BRANCH":"$BRANCH",
       "PREVIOUS_TAG":"$PREVIOUS_TAG",
       "COMMIT_SHA":"${CI_COMMIT_SHA:0:8}",
       "MESSAGE":"$MESSAGE",
       "TRIGGERED_BY":"$GITLAB_USER_NAME",
       "EMAIL":"$GITLAB_USER_EMAIL"
       }
     } 
EOF
)
  fi

echo "-------------------------------------------------"
echo "CANDIDATE: $STORY"
echo "PROJECT_ID: $CI_PROJECT_ID" #codebase repository id
echo "APPLICATION: $CI_PROJECT_NAME" #codebase project name
echo "BRANCH: $BRANCH" #codebase repository branch
echo "RELEASE_TAG: $TAG" #codebase repository tag 
echo "PREVIOUS_TAG: $PREVIOUS_TAG" #codebase previous tag
echo "COMMIT_SHA: ${CI_COMMIT_SHA:0:8}" #codebase commit sha
echo "COMMIT_MESSAGE: $MESSAGE" #codebase commit message
echo "TRIGGERED_BY: $GITLAB_USER_NAME" #user's committed
echo "EMAIL: $GITLAB_USER_EMAIL" #user's email
echo "-------------------------------------------------"

curl -k -X POST \
     -H 'Content-Type:application/json' \
     -d "$PAYLOAD" \
     https://gitlab.markcu.com/api/v4/projects/${PID}/trigger/pipeline > /dev/null
fi
